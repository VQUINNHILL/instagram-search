from flask import Flask, request, jsonify, render_template
import requests

from flask_cors import CORS

app = Flask(__name__)
CORS(app, origins=["https://supreme-meme-7qp4794rq59f6x-5000.app.github.dev"])


ACCESS_TOKEN = 'IGQWRQUGx1bDU3QmtlemtMOXNUYS1Ma3JBc1JPZAHR6UzFEZAVJrakYyVXVsYUVmNFVBV1BRSHhRWnBZAam01YW1pdXRZAYUg2QVNsZAVgwWjVDOVp6c2FzNWY5aFEyeEgtRjVKZAVNGUGpseGd6aXlBN1ZA2LW5RSVdLd0kZD'
USER_ID = '17841400682839492'
INSTAGRAM_API_URL = f'https://graph.instagram.com/v21.0/{USER_ID}/media?access_token={ACCESS_TOKEN}'


def fetch_all_posts():
    """Fetch all posts from the Instagram API with pagination."""
    url = f"https://graph.instagram.com/v21.0/{USER_ID}/media?access_token={ACCESS_TOKEN}"
    posts = []

    while url:
        response = requests.get(
            url,
            params={
                'fields': 'id,caption,media_url,timestamp',
                'access_token': ACCESS_TOKEN,
            }
        )
        logging.debug(f"API response status code: {response.status_code}")
        logging.debug(f"API response body: {response.text}")  # Log full response for debugging

        if response.status_code != 200:
            logging.error(f"Error fetching posts: {response.status_code} {response.text}")
            break

        data = response.json()
        posts.extend(data.get('data', []))
        url = data.get('paging', {}).get('next')  # Next page URL

    return posts

def filter_and_sort_posts(posts, keywords, sort_by):
    """Filter posts by keywords and sort by the given criteria."""
    keywords = [kw.lower() for kw in keywords]

    # Filter posts by matching keywords in captions
    filtered_posts = [
        {
            'caption': post.get('caption', ''),
            'media_url': post.get('media_url'),
            'timestamp': post.get('timestamp'),
            'relevance': sum(1 for kw in keywords if kw in post.get('caption', '').lower())
        }
        for post in posts
        if post.get('caption') and any(kw in post.get('caption', '').lower() for kw in keywords)
    ]

    # Sort posts by relevance or timestamp
    if sort_by == 'relevance':
        filtered_posts.sort(key=lambda x: x['relevance'], reverse=True)
    elif sort_by == 'timestamp':
        filtered_posts.sort(key=lambda x: x['timestamp'], reverse=True)

    return filtered_posts


@app.route('/')
def index():
    return render_template('index.html')

import logging

logging.basicConfig(level=logging.DEBUG)

@app.route('/search', methods=['POST'])
def search():
    data = request.get_json()
    keywords = data.get('keyword', '').split()
    sort_by = data.get('sort_by', 'relevance')  # Default sorting by relevance

    if not keywords:
        return jsonify([])

    # Fetch all Instagram posts
    posts = fetch_all_posts()

    # Filter and sort posts
    matching_posts = filter_and_sort_posts(posts, keywords, sort_by)

    logging.debug(f"Matching posts: {matching_posts}")
    return jsonify(matching_posts)


if __name__ == '__main__':
    app.run(debug=True)

@app.errorhandler(500)
def handle_500_error(e):
    return jsonify({"error": "Internal server error"}), 500

@app.errorhandler(404)
def handle_404_error(e):
    return jsonify({"error": "Endpoint not found"}), 404










<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Instagram Caption Search</title>
</head>
<body>
    <h1>Search Instagram Captions</h1>
    <form id="searchForm">
        <input type="text" id="keyword" placeholder="Enter keyword" required>
        <select id="sortBy">
           <option value="relevance">Sort by Relevance</option>
           <option value="timestamp">Sort by Timestamp</option>
        </select>
        <button type="submit">Search</button>
    </form>
    <div id="results"></div>

<script>
    document.getElementById('searchForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const keyword = document.getElementById('keyword').value;
        const sortBy = document.getElementById('sortBy').value;

        const response = await fetch('https://instagram-search-production.up.railway.app/search', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ keyword, sort_by: sortBy }),
        });

        const results = await response.json();
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = '';

        if (results.length > 0) {
            results.forEach(post => {
                const div = document.createElement('div');
                div.innerHTML = `<p>${post.caption}</p><img src="${post.media_url}" alt="Post Image" width="200">`;
                resultsDiv.appendChild(div);
            });
        } else {
            resultsDiv.innerHTML = '<p>No matching posts found.</p>';
        }
    });
</script>

</body>
</html>
