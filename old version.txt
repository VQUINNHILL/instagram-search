from flask import Flask, request, jsonify, render_template
import requests
import os
import logging
import time
from flask_cors import CORS

# App setup
app = Flask(__name__)
CORS(app, origins=["https://supreme-meme-7qp4794rq59f6x-5000.app.github.dev"])

# Environment configuration
ACCESS_TOKEN = ''
USER_ID = '17841400682839492'
INSTAGRAM_API_URL = f"https://graph.instagram.com/v21.0/{USER_ID}/media"

# Logging setup
logging.basicConfig(level=logging.DEBUG)


def fetch_with_retries(url, params, retries=3):
    """Fetch data from the Instagram API with retry logic."""
    for attempt in range(retries):
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logging.warning(f"Attempt {attempt + 1} failed: {e}")
            if attempt < retries - 1:
                time.sleep(2 ** attempt)  # Exponential backoff
            else:
                logging.error("All retry attempts failed.")
                raise


def fetch_all_posts():
    """Fetch the first 5 pages of posts from the Instagram API with timeouts."""
    url = f"https://graph.instagram.com/v21.0/{USER_ID}/media"
    posts = []
    page_limit = 5  # Limit to the first 5 pages
    page_count = 0  # Counter for the number of pages fetched

    while url and page_count < page_limit:
        try:
            response = requests.get(
                url,
                params={
                    'fields': 'id,caption,media_url,timestamp,media_type,children{media_type,media_url}',
                    'access_token': ACCESS_TOKEN,
                },
                timeout=10  # Set timeout to 10 seconds
            )
            logging.debug(f"API Response: {response.json()}")  # Log the full response

            if response.status_code != 200:
                logging.error(f"Error fetching posts: {response.status_code} {response.text}")
                break

            data = response.json()
            posts.extend(data.get('data', []))
            url = data.get('paging', {}).get('next')  # Get the next page URL
            page_count += 1  # Increment page counter

        except requests.exceptions.Timeout:
            logging.error("Request timed out while fetching posts")
            break
        except requests.exceptions.RequestException as e:
            logging.error(f"An error occurred: {e}")
            break

    logging.debug(f"Fetched posts: {posts}")  # Log the complete post list
    return posts





def filter_and_sort_posts(posts, keywords, sort_by):
    logging.debug(f"Posts before filtering: {posts}")
    """Filter posts by keywords and sort by the given criteria."""
    keywords = [kw.lower() for kw in keywords]

    # Filter posts by matching keywords in captions
    filtered_posts = [
        {
            "caption": post.get("caption", ""),
            "media_url": post.get("media_url", ""),
            "timestamp": post.get("timestamp", ""),
            "media_type": post.get("media_type", ""),  # Default to "UNKNOWN"
            "children": post.get("children", {}),
            "relevance": sum(1 for kw in keywords if kw in post.get("caption", "").lower()),
        }
        for post in posts
        if post.get("caption") and any(kw in post.get("caption", "").lower() for kw in keywords)
    ]


    # Sort posts by relevance or timestamp
    if sort_by == "relevance":
        filtered_posts.sort(key=lambda x: x["relevance"], reverse=True)
    elif sort_by == "timestamp":
        filtered_posts.sort(key=lambda x: x["timestamp"], reverse=True)
    logging.debug(f"Filtered posts: {filtered_posts}")

    return filtered_posts




@app.route('/')
def index():
    # Fetch posts to display in the grid
    posts = fetch_all_posts()
    # Limit to the most recent 20 posts for performance
    posts = posts[:20]
    return render_template('index.html', posts=posts)



@app.route("/search", methods=["POST"])
def search():
    data = request.get_json()
    keywords = data.get("keyword", "").split()
    sort_by = data.get("sort_by", "relevance")  # Default sorting by relevance

    if not keywords:
        return jsonify([])

    # Fetch all Instagram posts
    posts = fetch_all_posts()

    # Filter and sort posts
    matching_posts = filter_and_sort_posts(posts, keywords, sort_by)

    logging.debug(f"Final matching posts sent to frontend: {matching_posts}")
    return jsonify(matching_posts)


@app.errorhandler(500)
def handle_500_error(e):
    return jsonify({"error": "Internal server error"}), 500


@app.errorhandler(404)
def handle_404_error(e):
    return jsonify({"error": "Endpoint not found"}), 404


if __name__ == "__main__":
    app.run(debug=True)










<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Instagram Caption Search</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }

        h1 {
            text-align: center;
            margin: 20px 0;
        }

        #searchForm {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            padding: 20px;
        }

        #keyword, #sortBy {
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        button {
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            background: #0073e6;
            color: white;
            cursor: pointer;
            border-radius: 4px;
        }

        button:hover {
            background: #005bb5;
        }

        #results {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            padding: 20px;
            margin: 0 auto;
            max-width: 1200px;
        }

        .grid-item {
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            width: 300px; /* Specify post width */
            height: 400px; /* Specify post height */
        }

        .media-container {
            width: 100%;
            height: 75%; /* Media takes 75% of the post height */
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f0f0f0; /* Placeholder background */
        }

        .media-container img, .media-container video {
            width: 100%;
            height: 100%;
            object-fit: contain; /* Force media to fit container */
        }

        .grid-item p {
            margin: 10px;
            padding: 0 10px;
            font-size: 14px;
            color: #333;
            text-align: center;
            height: 25%; /* Caption takes 25% of the post height */
            overflow: hidden; /* Prevent long captions from overflowing */
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 3; /* Show up to 3 lines of text */
            -webkit-box-orient: vertical;
        }

        .grid-item:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .grid-item a {
          font-size: 14px;
           color: #0073e6;
            text-decoration: none;
            text-align: center;
            display: block;
            margin: 10px 0;
        }

        .grid-item a:hover {
         color: #005bb5;
            text-decoration: underline;
        }

        .carousel {
            display: flex;
            overflow-x: auto;
            gap: 10px;
            padding: 10px;
        }

        .carousel img, .carousel video {
            min-width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>
<body>
    <h1>Search Instagram Captions</h1>
    <form id="searchForm">
        <input type="text" id="keyword" placeholder="Enter keyword" required>
        <select id="sortBy">
           <option value="relevance">Sort by Relevance</option>
           <option value="timestamp">Sort by Timestamp</option>
        </select>
        <button type="submit">Search</button>
    </form>
    <div id="results"></div>

    <script>
document.getElementById('searchForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const keyword = document.getElementById('keyword').value;
    const sortBy = document.getElementById('sortBy').value;

    try {
        const response = await fetch('https://instagram-search-production.up.railway.app/search', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ keyword, sort_by: sortBy }),
        });

        if (!response.ok) {
            console.error(`API Error: ${response.status}`);
            throw new Error('Failed to fetch posts');
        }

        const results = await response.json();
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = '';

        if (results.length > 0) {
            results.forEach(post => {
                const div = document.createElement('div');
                div.className = 'grid-item';

                // Create media container
                const mediaContainer = document.createElement('div');
                mediaContainer.className = 'media-container';

                const mediaType = post.media_type || inferMediaType(post.media_url);

                if (mediaType === 'IMAGE') {
                    const img = document.createElement('img');
                    img.src = post.media_url;
                    img.alt = 'Post Image';
                    mediaContainer.appendChild(img);
                } else if (mediaType === 'CAROUSEL_ALBUM') {
                    mediaContainer.appendChild(createCarousel(post.children?.data || []));
                } else if (mediaType === 'VIDEO') {
                    const video = document.createElement('video');
                    video.src = post.media_url;
                    video.controls = true;
                    mediaContainer.appendChild(video);
                } else {
                    const unknown = document.createElement('p');
                    unknown.textContent = 'Unknown media type';
                    mediaContainer.appendChild(unknown);
                }

                // Add caption as a clickable link
                const caption = document.createElement('a');
                caption.href = `https://www.instagram.com/p/${post.id}`; // Construct Instagram URL
                caption.target = '_blank'; // Open in a new tab
                caption.textContent = post.caption || 'No caption available';
                caption.style.textDecoration = 'none'; // Optional styling
                caption.style.color = '#0073e6'; // Optional styling for link color

                // Append to grid item
                div.appendChild(mediaContainer);
                div.appendChild(caption);
                resultsDiv.appendChild(div);
            });
        } else {
            resultsDiv.innerHTML = '<p>No matching posts found.</p>';
        }
    } catch (error) {
        console.error('Error fetching or rendering posts:', error);
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = '<p>Failed to load posts. Please try again later.</p>';
    }
});


        function inferMediaType(mediaUrl) {
            if (mediaUrl.match(/\.(jpg|jpeg|png|gif)$/i)) {
                return 'IMAGE';
            } else if (mediaUrl.match(/\.(mp4|mov|webm)$/i)) {
                return 'VIDEO';
            }
            return 'UNKNOWN';
        }

        function createCarousel(children) {
            if (!children || children.length === 0) {
                const empty = document.createElement('p');
                empty.textContent = 'No content available.';
                return empty;
            }
    
            const container = document.createElement('div');
            container.className = 'carousel';
    
            children.forEach(child => {
                const mediaItem = document.createElement('div');
                const mediaType = child.media_type;
    
                if (mediaType === 'IMAGE') {
                    const img = document.createElement('img');
                    img.src = child.media_url;
                    mediaItem.appendChild(img);
                } else if (mediaType === 'VIDEO') {
                    const video = document.createElement('video');
                    video.src = child.media_url;
                    video.controls = true;
                    mediaItem.appendChild(video);
                }
    
                container.appendChild(mediaItem);
            });
    
            return container;
        }
    </script>
</body>
</html>
